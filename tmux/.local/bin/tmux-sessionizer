#!/usr/bin/env bash

if [[ $# -eq 1 ]]; then
    # Support simply passing the current working directory or a specified path
    selected="$1" && [[ "$selected" == '.' ]] && selected="$PWD"
else
    selected=$(find ~ ~/src ~/src/*/worktrees -mindepth 1 -maxdepth 1 -type d | fzf)
fi

if [[ -z $selected ]]; then
    exit 0
fi


is_bare_repo_worktree=false

# check if the selected dir contains a dir called worktrees
if [[ $selected == */worktrees/* ]]; then
  is_bare_repo_worktree=true
  # set the selected dir to reference where the code lives--back one directory
  selected=$(echo $selected | awk -F '/worktrees' '{print $1 $NF}')
  # this works too
  # echo $selected | awk 'BEGIN{FS="/worktrees/"; OFS="/"} {print $1, $NF}'
fi

selected_name=""
# for a little more context, name sessions that are worktrees of bare repos
# repo_name/worktree_name
if $is_bare_repo_worktree ; then
  selected_name+=$(echo $selected | awk -F '/' '{print $(NF-1)}' | tr . _)/
fi
selected_name+=$(basename "$selected" | tr . _)

tmux_running=$(pgrep tmux)

# handle tmux not running
if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    tmux new-session -s $selected_name -c $selected
    exit 0
fi

# handle outside of tmux but tmux IS running
if [[ -z $TMUX ]]; then
    tmux new-session -s $selected_name -c $selected \
    || tmux attach -t $selected_name
    exit 0
fi

# handle tmux is running and the session doesn't yet exist
if ! tmux has-session -t=$selected_name 2> /dev/null; then
    tmux new-session -ds $selected_name -c $selected
fi

# handle tmux is running and the session doesn't exist
tmux switch-client -t $selected_name
